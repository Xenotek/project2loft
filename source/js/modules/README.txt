===============  Документация к base.js ===============

I. Обозначения.
    1) оргументы функций
        * если аругмент фуркции начинается с $, к примеру $form, значит функция принимает на взод jquery элемент.
        * если аругмент фуркции начинается с _, к примеру _type, значит аргумент функции не обязательный.

II. Объекты и массивы.
    * Библиотека может содержать объекты и массивы, они так же досутпны через точку.

    * Список объектов и массивов
        1) errors - объект содержащий номера ошибок и текст ошибок. Обращение происходит так
        base.errors[2] - Выведет сообщение об ошибке с индексом 2. errors, не является массивом, тем нимения к нему
        можно обращаться по числовому индексу.

        2) RegPatterns - объект содержащий регулярные выражения. RegPatterns.email - выдаст регулярное выражение
        для проверки email, которое можно использовать в функции test.

        3) global - объект для записи свойст, является по большей части служебным. К примеру в него можно записать
        номер счетчика и он станет доступным во всех функциях библиотеки или модуля. Запись свойств global.timer = 123.
        Вместо timer используется любое имя свойства.

III. Функции.
    * Функции так же вызываются через точку, в любом модуле , где создан экземляр библиотеки.
    * Функции можно писать и ипользовать в других функция библиотеки, прямо в base.js, в таком случае нужно
    использовать this который указывает на BaseModule. Другими словами this должен указывать на корень библиотеки.

    * Список функций

        1) ajaxData($form, _attr) - Функция принимает минимум один аргумент - форма выбранная через jquery.
        Данная функция находит все input,textarea в форме (кроме type = submit), получает введеное значение и формирует
        объект для отправки на сервер в формате json. Ключи для объекта берутся из параметра name, значения из введеных
        данных.
        Пример: input(name="user")(введеное значение - "Паша")  --> {user: 'Паша' }
        Функццию целесообразно использовать при отправке ajax на сервер или просто при клике на форму.
        Необезательные атрибуты :
         * _attr - атрибут по которому генерируется объект, по умолчанию name

        2) ajax($form, url, _method) - Функция отправляет ajax на указанный адресс.
        В функцию необходимо передать jquery форму для создания объкта для отправки на сервер.В ajax вшита функция ajaxData
        со стандартными параметрами, по этому объект для отправки автоматически сгенерируется.
        url - адресс отправки к примеру /login/.
        Необезательные атрибуты :
          * _method - метод отправки.

        3) showError(errorIndex,$elem,_ms) - показывает ошибку и уберает ее через заданное время.
        Для правильной работы showError - ей нужно передать индекс ошибки из объекта errors(описан выше),
        $elem - элемент, куда будет вставлятся текст ошибки.
        Чтобы ошибка появлялась и исчезалаю, элемент должен находиться в html и иметь стили для классов show и hide.
        Данная функция просто добавляет классы и вставляет текст.
        Необезательные атрибуты :
          * _ms - время , через которое исчезнет блок с ошибкой в мс. По умолчанию 2000 (2 секунды)

        4) hideError($elem) - функция удаляет класс show и добавляет класс hide, переданному jq элементу.

        5) validEmail($input, patter)  - функция принимает jq инпут и шаблон регулярных выражений(описан выше).
        Функция сравнивает введенные данные из поля с шаблоном и возвращает true или false.

        6) validPass($input,_length) - проверяет поле на количество символов, по умолчанию 8. Возвращает
        true или false.

        7) validateForm($form) - функция проверяет форму на, заполненность полей, правильный email
        и длинну пароля(8 символов). Генерирует и возвращает массив с номерами ошибок, если ошибок нет, возвращает
        пустой массив.

        8) clearInputs($form) - очищает все поля и textarea формы, (кроме type = submit)

IV. Работа с библиотекой.
    Данная библиотека является конструктором(классом) объектов, по этому ее нужно объявить через new.
    var test = new BaseModule;

    После этого все методы и свойства будут доступны через точку, например так test.ajax($form, url).

    В библиотеку можно дописывать все что угодно, главное чтобы функция, объект, массив или еще что то, начиналось
    с this. Чтобы использовать функции описанные в base.js внутри функций base.js, так же следует использовать this.
